package com.model2.mvc.product.mapper;

import static org.assertj.core.api.Assertions.assertThat;

import com.model2.mvc.category.domain.Category;
import com.model2.mvc.common.MapperWithoutSpringInitializer;
import com.model2.mvc.common.SearchCondition;
import com.model2.mvc.product.domain.OrderBy;
import com.model2.mvc.product.domain.Product;
import org.apache.ibatis.session.SqlSession;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Date;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.function.Function;
import java.util.stream.Collectors;

public class TestProductMapper {
    private static final Logger log = LoggerFactory.getLogger(TestProductMapper.class);
    private SqlSession sqlSession;

    @Before
    public void init() {
        this.sqlSession = MapperWithoutSpringInitializer.initUnitTest("ProductMapper.clear", "CategoryMapper.clear");
    }

    @After
    public void destroy() {
//        MapperWithoutSpringInitializer.afterUnitTest(this.sqlSession, "ProductMapper.clear", "CategoryMapper.clear");
    }

    @Test
    public void insert() {
        Product prod = new Product();
        prod.setProdName("Product1");
        prod.setProdDetail("Detail of prod");
        prod.setManuDate(LocalDate.of(2023, 1, 2));
        prod.setPrice(10000);
        prod.setFileName("asdf.png");
        prod.setRegDate(new Date(System.currentTimeMillis()));
        prod.setStock(13);
        this.sqlSession.insert("ProductMapper.insert", prod);
    }

    @Test
    public void findById() {
        Product prod = new Product();
        prod.setProdName("Product1");
        prod.setProdDetail("Detail of prod");
        prod.setManuDate(LocalDate.of(2023, 1, 2));
        prod.setPrice(10000);
        prod.setFileName("asdf.png");
        prod.setRegDate(new Date(System.currentTimeMillis()));
        prod.setStock(13);
        this.sqlSession.insert("ProductMapper.insert", prod);

        log.debug("Autogenerated key={}", prod.getProdNo());

        Product found = sqlSession.selectOne("ProductMapper.findById", prod.getProdNo());
        assertThat(found).isEqualTo(prod);
        assertThat(found.getProdNo()).isEqualTo(prod.getProdNo());
        assertThat(found.getProdName()).isEqualTo(prod.getProdName());
        assertThat(found.getProdDetail()).isEqualTo(prod.getProdDetail());
        assertThat(found.getPrice()).isEqualTo(prod.getPrice());
        assertThat(found.getFileName()).isEqualTo(prod.getFileName());
        assertThat(found.getStock()).isEqualTo(prod.getStock());
    }

    @Test
    public void findProductsByIds() {
        Product product1 = new Product("Product1", 3000, 24);
        Product product2 = new Product("Product2", 2000, 12);
        Product product3 = new Product("Product3", 50000, 120);
        this.sqlSession.insert("ProductMapper.insert", product1);
        this.sqlSession.insert("ProductMapper.insert", product2);
        this.sqlSession.insert("ProductMapper.insert", product3);

        List<Integer> ids = new ArrayList<>();
        ids.add(product1.getProdNo());
        ids.add(product2.getProdNo());
        ids.add(product3.getProdNo());
        List<Product> products = this.sqlSession.selectList("ProductMapper.findProductsByIds", ids);

        assertThat(products.size()).isEqualTo(3);

        List<Integer> foundIds = products.stream().map(Product::getProdNo).collect(Collectors.toList());
        assertThat(foundIds).contains(product1.getProdNo(), product2.getProdNo(), product3.getProdNo());

        List<String> foundNames = products.stream().map(Product::getProdName).collect(Collectors.toList());
        assertThat(foundNames).contains(product1.getProdName(), product2.getProdName(), product3.getProdName());
    }

    @Test
    public void findProductsByProdName() {
        Product product1 = new Product("Product1", 3000, 24);
        Product product2 = new Product("Product2", 2000, 12);
        Product product3 = new Product("Product3", 50000, 120);

        List<Product> prods = Arrays.asList(product1, product2, product3);

        prods.forEach(p -> this.sqlSession.insert("ProductMapper.insert", p));

        Map<String, Object> search1 = new HashMap<>();
        search1.put("prodName", "Product%");
        search1.put("startRowNum", 1);
        search1.put("endRowNum", 3);
        search1.put("searchCondition", SearchCondition.BY_NAME.getConditionCode());
        List<Product> found1 = this.sqlSession.selectList("ProductMapper.findList", search1);

        findProductsByProdName_aTest(found1, prods);

        Map<String, Object> search2 = new HashMap<>();
        search2.put("prodName", "Product1");
        search2.put("startRowNum", 1);
        search2.put("endRowNum", 3);
        search2.put("searchCondition", SearchCondition.BY_NAME.getConditionCode());
        List<Product> found2 = this.sqlSession.selectList("ProductMapper.findList", search2);

        findProductsByProdName_aTest(found2, prods);

        Map<String, Object> search3 = new HashMap<>();
        search3.put("prodName", "%2");
        search3.put("startRowNum", 1);
        search3.put("endRowNum", 3);
        search3.put("searchCondition", SearchCondition.BY_NAME.getConditionCode());
        List<Product> found3 = this.sqlSession.selectList("ProductMapper.findList", search3);

        findProductsByProdName_aTest(found3, prods);
    }

    private void findProductsByProdName_aTest(List<Product> found, List<Product> prods) {
        assertThat(prods).contains(found.toArray(new Product[0]));

        List<String> prodNames = prods.stream().map(Product::getProdName).collect(Collectors.toList());
        List<String> foundNames = found.stream().map(Product::getProdName).collect(Collectors.toList());

        assertThat(prodNames).contains(foundNames.toArray(new String[0]));
    }

    @Test
    public void update() {
        Product prod = new Product();
        prod.setProdName("Product1");
        prod.setProdDetail("Detail of prod");
        prod.setManuDate(LocalDate.of(2023, 1, 2));
        prod.setPrice(10000);
        prod.setFileName("asdf.png");
        prod.setRegDate(new Date(System.currentTimeMillis()));
        prod.setStock(13);
        this.sqlSession.insert("ProductMapper.insert", prod);

        int prodNo = prod.getProdNo();
        log.debug("Autogenerated key={}", prodNo);

        Product forUpdateName = new Product(prodNo);
        forUpdateName.setProdName("Product2");
        singleUpdateTest(forUpdateName, Product::getProdName);

        Product forUpdateDetail = new Product(prodNo);
        forUpdateDetail.setProdDetail("New detail");
        singleUpdateTest(forUpdateDetail, Product::getProdDetail);

        Product forUpdatePrice = new Product(prodNo);
        forUpdatePrice.setPrice(1234);
        singleUpdateTest(forUpdatePrice, Product::getPrice);

        Product forUpdateManuDate = new Product(prodNo);
        forUpdateManuDate.setManuDate(LocalDate.of(2017, 01, 22));
        singleUpdateTest(forUpdateManuDate, Product::getManuDate);
    }

    private <E> void singleUpdateTest(Product to, Function<Product, E> propertyExtractor) {
        Product prototype = new Product();
        prototype.setProdName("Product1");
        prototype.setProdDetail("Detail of prod");
        prototype.setManuDate(LocalDate.of(2023, 1, 2));
        prototype.setPrice(10000);
        prototype.setFileName("asdf.png");
        prototype.setRegDate(new Date(System.currentTimeMillis()));
        prototype.setStock(13);
        this.sqlSession.update("ProductMapper.update", to);
        Product updated = this.sqlSession.selectOne("ProductMapper.findById", to.getProdNo());
        E updatedProperty = propertyExtractor.apply(updated);
        E toProperty = propertyExtractor.apply(to);
        E prototypeProperty = propertyExtractor.apply(prototype);

        assertThat(updatedProperty).isNotEqualTo(prototypeProperty);
        assertThat(updatedProperty).isEqualTo(toProperty);
    }

    @Test
    public void findAllProducts_orderByProdNo() {
        Category category = new Category("sample-category");
        this.sqlSession.insert("CategoryMapper.insert", category);

        for (int i = 0; i < 20; i++) {
            int num = i + 1;
            this.sqlSession.insert("ProductMapper.insert",
                                   Product.builder()
                                           .prodName("product-" + num)
                                           .prodDetail("detail-" + num)
                                           .manuDate(LocalDate.now())
                                           .price(100 * num)
                                           .stock(150 * num)
                                           .regDate(new Date(System.currentTimeMillis()))
                                           .category(num % 2 == 0 ? null : category)
                                           .build());
        }

        Map<String, Object> search = new HashMap<>();
        search.put("startRowNum", 1);
        search.put("endRowNum", 4);
        search.put("orderBy", OrderBy.PROD_NO);
        search.put("ascend", true);

        List<Product> products = this.sqlSession.selectList("ProductMapper.findList", search);

        for (int i = 1; i <= 4; i++) {
            assertThat(products.get(i - 1).getProdName()).isEqualTo("product-" + i);
        }
    }

    @Test
    public void findAllProducts_orderByPrice() {
        Category category = new Category("sample-category");
        this.sqlSession.insert("CategoryMapper.insert", category);

        for (int i = 0; i < 20; i++) {
            Random random = new Random();
            int num = i + 1;
            this.sqlSession.insert("ProductMapper.insert",
                                   Product.builder()
                                           .prodName("product-" + num)
                                           .prodDetail("detail-" + num)
                                           .manuDate(LocalDate.now())
                                           .price(Math.abs((random.nextInt() % 1000 + 1) * num))
                                           .stock(150 * num)
                                           .regDate(new Date(System.currentTimeMillis()))
                                           .category(num % 2 == 0 ? null : category)
                                           .build());
        }

        Map<String, Object> search = new HashMap<>();
        search.put("startRowNum", 1);
        search.put("endRowNum", 4);
        search.put("orderBy", OrderBy.PRICE);
        search.put("ascend", false);

        List<Product> products = this.sqlSession.selectList("ProductMapper.findList", search);
        products.forEach(System.out::println);

        for (int i = 0; i < products.size() - 1; i++) {
            assertThat(products.get(i).getPrice()).isGreaterThanOrEqualTo(products.get(i + 1).getPrice());
        }
    }
}
